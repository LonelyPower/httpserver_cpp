29795 warnings generated.
55971 warnings generated.
85187 warnings generated.
113173 warnings generated.
161162 warnings generated.
189112 warnings generated.
218734 warnings generated.
264091 warnings generated.
298203 warnings generated.
345195 warnings generated.
/usr/httpserver_cpp/client.cpp:4:10: warning: inclusion of deprecated C++ header 'string.h'; consider using 'cstring' instead [modernize-deprecated-headers]
#include <string.h>
         ^~~~~~~~~~
         <cstring>
/usr/httpserver_cpp/client.cpp:8:9: warning: macro 'BUFFER_SIZE' used to declare a constant; consider using a 'constexpr' constant [cppcoreguidelines-macro-usage]
#define BUFFER_SIZE 1024 
        ^
/usr/httpserver_cpp/client.cpp:10:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int main() 
~~~ ^
auto       -> int
/usr/httpserver_cpp/client.cpp:15:41: warning: 8888 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
    client.connectToServer("127.0.0.1", 8888);
                                        ^
/usr/httpserver_cpp/client.cpp:23:9: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
        char buf[BUFFER_SIZE]; // 在这个版本，buf大小必须大于或等于服务器端buf大小，不然会出错，想想为什么？
        ^
/usr/httpserver_cpp/client.cpp:24:9: warning: The bzero() function is obsoleted by memset() [clang-analyzer-security.insecureAPI.bzero]
        bzero(&buf, sizeof(buf));
        ^~~~~
/usr/httpserver_cpp/client.cpp:24:9: note: The bzero() function is obsoleted by memset()
        bzero(&buf, sizeof(buf));
        ^~~~~
/usr/httpserver_cpp/client.cpp:32:9: warning: The bzero() function is obsoleted by memset() [clang-analyzer-security.insecureAPI.bzero]
        bzero(&buf, sizeof(buf));
        ^~~~~
/usr/httpserver_cpp/client.cpp:32:9: note: The bzero() function is obsoleted by memset()
        bzero(&buf, sizeof(buf));
        ^~~~~
/usr/httpserver_cpp/server.cpp:5:5: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int main()
~~~ ^
auto       -> int
/usr/httpserver_cpp/server.cpp:8:5: warning: uninitialized record type: 'rl' [cppcoreguidelines-pro-type-member-init]
    struct rlimit rl;
    ^
                    {}
/usr/httpserver_cpp/server.cpp:8:19: warning: variable name 'rl' is too short, expected at least 3 characters [readability-identifier-length]
    struct rlimit rl;
                  ^
/usr/httpserver_cpp/server.cpp:12:5: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
    MyEventLoop *loop = new MyEventLoop();
    ^~~~~~~~~~~
    auto
/usr/httpserver_cpp/server.cpp:13:5: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
    MyServer *server = new MyServer(loop);
    ^~~~~~~~
    auto
/usr/httpserver_cpp/server.cpp:13:15: warning: Value stored to 'server' during its initialization is never read [clang-analyzer-deadcode.DeadStores]
    MyServer *server = new MyServer(loop);
              ^~~~~~   ~~~~~~~~~~~~~~~~~~
/usr/httpserver_cpp/server.cpp:13:15: note: Value stored to 'server' during its initialization is never read
    MyServer *server = new MyServer(loop);
              ^~~~~~   ~~~~~~~~~~~~~~~~~~
/usr/httpserver_cpp/server.cpp:14:5: warning: Potential leak of memory pointed to by 'server' [clang-analyzer-cplusplus.NewDeleteLeaks]
    loop->startLoop();
    ^
/usr/httpserver_cpp/server.cpp:13:24: note: Memory is allocated
    MyServer *server = new MyServer(loop);
                       ^~~~~~~~~~~~~~~~~~
/usr/httpserver_cpp/server.cpp:14:5: note: Potential leak of memory pointed to by 'server'
    loop->startLoop();
    ^
/usr/httpserver_cpp/src/Buffer.h:12:42: warning: 4096 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
    explicit Buffer(size_t initialSize = 4096)
                                         ^
/usr/httpserver_cpp/src/Buffer.h:15:5: warning: function 'readableBytes' should be marked [[nodiscard]] [modernize-use-nodiscard]
    size_t readableBytes() const { return writeIndex_ - readIndex_; }
    ^
    [[nodiscard]] 
/usr/httpserver_cpp/src/Buffer.h:15:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
    size_t readableBytes() const { return writeIndex_ - readIndex_; }
    ~~~~~~ ^
    auto                         -> size_t
/usr/httpserver_cpp/src/Buffer.h:15:12: warning: invalid case style for function 'readableBytes' [readability-identifier-naming]
    size_t readableBytes() const { return writeIndex_ - readIndex_; }
           ^~~~~~~~~~~~~
           ReadableBytes
/usr/httpserver_cpp/src/Buffer.h:16:5: warning: function 'writableBytes' should be marked [[nodiscard]] [modernize-use-nodiscard]
    size_t writableBytes() const { return buffer_.size() - writeIndex_; }
    ^
    [[nodiscard]] 
/usr/httpserver_cpp/src/Buffer.h:16:12: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
    size_t writableBytes() const { return buffer_.size() - writeIndex_; }
    ~~~~~~ ^
    auto                         -> size_t
/usr/httpserver_cpp/src/Buffer.h:16:12: warning: invalid case style for function 'writableBytes' [readability-identifier-naming]
    size_t writableBytes() const { return buffer_.size() - writeIndex_; }
           ^~~~~~~~~~~~~
           WritableBytes
/usr/httpserver_cpp/src/Buffer.h:18:5: warning: function 'peek' should be marked [[nodiscard]] [modernize-use-nodiscard]
    const char* peek() const { return buffer_.data() + readIndex_; }
    ^
    [[nodiscard]] 
/usr/httpserver_cpp/src/Buffer.h:18:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
    const char* peek() const { return buffer_.data() + readIndex_; }
    ~~~~~~~~~~~ ^
    auto                     -> const char*
/usr/httpserver_cpp/src/Buffer.h:18:17: warning: invalid case style for function 'peek' [readability-identifier-naming]
    const char* peek() const { return buffer_.data() + readIndex_; }
                ^~~~
                Peek
/usr/httpserver_cpp/src/Buffer.h:18:54: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    const char* peek() const { return buffer_.data() + readIndex_; }
                                                     ^
/usr/httpserver_cpp/src/Buffer.h:19:11: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
    char* beginWrite() { return buffer_.data() + writeIndex_; }
    ~~~~~ ^
    auto               -> char*
/usr/httpserver_cpp/src/Buffer.h:19:11: warning: invalid case style for function 'beginWrite' [readability-identifier-naming]
    char* beginWrite() { return buffer_.data() + writeIndex_; }
          ^~~~~~~~~~
          BeginWrite
/usr/httpserver_cpp/src/Buffer.h:19:48: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    char* beginWrite() { return buffer_.data() + writeIndex_; }
                                               ^
/usr/httpserver_cpp/src/Buffer.h:20:5: warning: function 'beginWrite' should be marked [[nodiscard]] [modernize-use-nodiscard]
    const char* beginWrite() const { return buffer_.data() + writeIndex_; }
    ^
    [[nodiscard]] 
/usr/httpserver_cpp/src/Buffer.h:20:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
    const char* beginWrite() const { return buffer_.data() + writeIndex_; }
    ~~~~~~~~~~~ ^
    auto                           -> const char*
/usr/httpserver_cpp/src/Buffer.h:20:17: warning: invalid case style for function 'beginWrite' [readability-identifier-naming]
    const char* beginWrite() const { return buffer_.data() + writeIndex_; }
                ^~~~~~~~~~
                BeginWrite
/usr/httpserver_cpp/src/Buffer.h:20:60: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
    const char* beginWrite() const { return buffer_.data() + writeIndex_; }
                                                           ^
/usr/httpserver_cpp/src/Buffer.h:22:10: warning: invalid case style for function 'retrieve' [readability-identifier-naming]
    void retrieve(size_t len) {
         ^~~~~~~~
         Retrieve
/usr/httpserver_cpp/src/Buffer.h:30:10: warning: invalid case style for function 'retrieveAll' [readability-identifier-naming]
    void retrieveAll() {
         ^~~~~~~~~~~
         RetrieveAll
/usr/httpserver_cpp/src/Buffer.h:35:17: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
    std::string retrieveAllAsString() {
    ~~~~~~~~~~~ ^
    auto                              -> std::string
/usr/httpserver_cpp/src/Buffer.h:35:17: warning: invalid case style for function 'retrieveAllAsString' [readability-identifier-naming]
    std::string retrieveAllAsString() {
                ^~~~~~~~~~~~~~~~~~~
                RetrieveAllAsString
/usr/httpserver_cpp/src/Buffer.h:36:21: warning: variable name 's' is too short, expected at least 3 characters [readability-identifier-length]
        std::string s(peek(), readableBytes());
                    ^
/usr/httpserver_cpp/src/Buffer.h:41:10: warning: invalid case style for function 'append' [readability-identifier-naming]
    void append(const char* data, size_t len) {
         ^
note: this fix will not be applied because it overlaps with another fix
/usr/httpserver_cpp/src/Buffer.h:47:10: warning: invalid case style for function 'append' [readability-identifier-naming]
    void append(const std::string& s) { append(s.data(), s.size()); }
         ^~~~~~
         Append
/usr/httpserver_cpp/src/Buffer.h:47:36: warning: parameter name 's' is too short, expected at least 3 characters [readability-identifier-length]
    void append(const std::string& s) { append(s.data(), s.size()); }
                                   ^
/usr/httpserver_cpp/src/Buffer.h:49:10: warning: invalid case style for function 'ensureWritable' [readability-identifier-naming]
    void ensureWritable(size_t len) {
         ^~~~~~~~~~~~~~
         EnsureWritable
/usr/httpserver_cpp/src/Buffer.h:55:10: warning: invalid case style for function 'hasWritten' [readability-identifier-naming]
    void hasWritten(size_t len) { writeIndex_ += len; }
         ^
note: this fix will not be applied because it overlaps with another fix
/usr/httpserver_cpp/src/Buffer.h:58:13: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
    ssize_t readFd(int fd, int* savedErrno) {
    ~~~~~~~ ^
    auto                                    -> ssize_t
/usr/httpserver_cpp/src/Buffer.h:58:13: warning: invalid case style for function 'readFd' [readability-identifier-naming]
    ssize_t readFd(int fd, int* savedErrno) {
            ^~~~~~
            ReadFd
/usr/httpserver_cpp/src/Buffer.h:58:24: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
    ssize_t readFd(int fd, int* savedErrno) {
                       ^
/usr/httpserver_cpp/src/Buffer.h:60:9: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
        char extrabuf[65536];
        ^
/usr/httpserver_cpp/src/Buffer.h:60:23: warning: 65536 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        char extrabuf[65536];
                      ^
/usr/httpserver_cpp/src/Buffer.h:61:9: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
        struct iovec vec[2];
        ^
/usr/httpserver_cpp/src/Buffer.h:69:17: warning: variable name 'n' is too short, expected at least 3 characters [readability-identifier-length]
        ssize_t n = ::readv(fd, vec, iovcnt);
                ^
/usr/httpserver_cpp/src/Buffer.h:71:17: warning: implicit conversion 'int *' -> bool [readability-implicit-bool-conversion]
            if (savedErrno) *savedErrno = errno;
                ^
                           != nullptr
/usr/httpserver_cpp/src/Buffer.h:71:28: warning: statement should be inside braces [readability-braces-around-statements]
            if (savedErrno) *savedErrno = errno;
                           ^
                            {
/usr/httpserver_cpp/src/Buffer.h:73:11: warning: do not use 'else' after 'return' [readability-else-after-return]
        } else if (n <= static_cast<ssize_t>(writable)) {
          ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/httpserver_cpp/src/Buffer.h:83:13: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
    ssize_t writeFd(int fd, int* savedErrno) {
    ~~~~~~~ ^
    auto                                     -> ssize_t
/usr/httpserver_cpp/src/Buffer.h:83:13: warning: invalid case style for function 'writeFd' [readability-identifier-naming]
    ssize_t writeFd(int fd, int* savedErrno) {
            ^~~~~~~
            WriteFd
/usr/httpserver_cpp/src/Buffer.h:83:25: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
    ssize_t writeFd(int fd, int* savedErrno) {
                        ^
/usr/httpserver_cpp/src/Buffer.h:84:16: warning: invalid case style for variable 'nToWrite' [readability-identifier-naming]
        size_t nToWrite = readableBytes();
               ^~~~~~~~
               n_to_write
/usr/httpserver_cpp/src/Buffer.h:85:17: warning: variable name 'n' is too short, expected at least 3 characters [readability-identifier-length]
        ssize_t n = ::write(fd, peek(), nToWrite);
                ^
/usr/httpserver_cpp/src/Buffer.h:87:17: warning: implicit conversion 'int *' -> bool [readability-implicit-bool-conversion]
            if (savedErrno) *savedErrno = errno;
                ^
                           != nullptr
/usr/httpserver_cpp/src/Buffer.h:87:28: warning: statement should be inside braces [readability-braces-around-statements]
            if (savedErrno) *savedErrno = errno;
                           ^
                            {
/usr/httpserver_cpp/src/Buffer.h:95:10: warning: invalid case style for function 'makeSpace' [readability-identifier-naming]
    void makeSpace(size_t len) {
         ^~~~~~~~~
         MakeSpace
/usr/httpserver_cpp/src/Buffer.h:99:57: warning: do not use pointer arithmetic [cppcoreguidelines-pro-bounds-pointer-arithmetic]
            std::memmove(buffer_.data(), buffer_.data() + readIndex_, readable);
                                                        ^
/usr/httpserver_cpp/src/Buffer.h:109:12: warning: use default member initializer for 'readIndex_' [modernize-use-default-member-init]
    size_t readIndex_;
           ^
                     {0}
/usr/httpserver_cpp/src/Buffer.h:110:12: warning: use default member initializer for 'writeIndex_' [modernize-use-default-member-init]
    size_t writeIndex_;
           ^
                      {0}
/usr/httpserver_cpp/src/MyAcceptor.cpp:3:62: warning: parameter name 'ip' is too short, expected at least 3 characters [readability-identifier-length]
MyAcceptor::MyAcceptor(MyEventLoop *loop, const std::string &ip, int port) : event_loop_(loop)
                                                             ^
/usr/httpserver_cpp/src/MyAcceptor.cpp:5:5: warning: 'serv_sock_' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]
    serv_sock_ = new MySocket();
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/httpserver_cpp/src/MyAcceptor.cpp:10:5: warning: 'serv_channel_' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]
    serv_channel_ = new MyChannel(serv_sock_->getFd(), ACCEPT_MODE);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/httpserver_cpp/src/MyAcceptor.cpp:42:13: warning: do not use 'else' after 'break' [readability-else-after-return]
            else if (errno == EINTR)
            ^~~~~~~~~~~~~~~~~~~~~~~~
/usr/httpserver_cpp/src/MyAcceptor.cpp:74:61: warning: the const qualified parameter 'cb' is copied for each invocation; consider making it a reference [performance-unnecessary-value-param]
void MyAcceptor::setCallBack(const std::function<void(int)> cb)
                                                            ^
                                                           &
/usr/httpserver_cpp/src/MyAcceptor.cpp:74:61: warning: parameter name 'cb' is too short, expected at least 3 characters [readability-identifier-length]
/usr/httpserver_cpp/src/MyAcceptor.cpp:76:26: warning: std::move of the const variable 'cb' has no effect; remove std::move() or make the variable non-const [performance-move-const-arg]
    acceptor_callback_ = std::move(cb);
                         ^~~~~~~~~~  ~
/usr/httpserver_cpp/src/MyAcceptor.h:10:7: warning: class 'MyAcceptor' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class MyAcceptor
      ^
/usr/httpserver_cpp/src/MyAcceptor.h:13:54: warning: parameter name 'ip' is too short, expected at least 3 characters [readability-identifier-length]
    MyAcceptor(MyEventLoop *loop, const std::string &ip, int port); // 构造函数
                                                     ^
/usr/httpserver_cpp/src/MyAcceptor.h:17:10: warning: invalid case style for function 'setCallBack' [readability-identifier-naming]
    void setCallBack(const std::function<void(int)> cb);
         ^~~~~~~~~~~
         SetCallBack
/usr/httpserver_cpp/src/MyAcceptor.h:17:22: warning: parameter 'cb' is const-qualified in the function declaration; const-qualification of parameters only has an effect in function definitions [readability-avoid-const-params-in-decls]
    void setCallBack(const std::function<void(int)> cb);
                     ^~~~~~
/usr/httpserver_cpp/src/MyAcceptor.h:17:53: warning: parameter name 'cb' is too short, expected at least 3 characters [readability-identifier-length]
    void setCallBack(const std::function<void(int)> cb);
                                                    ^
/usr/httpserver_cpp/src/MyAcceptor.h:18:10: warning: invalid case style for function 'handleConnection1' [readability-identifier-naming]
    void handleConnection1();
         ^~~~~~~~~~~~~~~~~
         HandleConnection1
/usr/httpserver_cpp/src/MyAcceptor.h:19:10: warning: invalid case style for function 'handleConnection' [readability-identifier-naming]
    void handleConnection();
         ^~~~~~~~~~~~~~~~
         HandleConnection
/usr/httpserver_cpp/src/MyChannel.cpp:8:22: warning: 2 adjacent parameters of 'MyChannel' of similar type are easily swapped by mistake [bugprone-easily-swappable-parameters]
MyChannel::MyChannel(int fd,int32_t events)
                     ^~~~~~~~~~~~~~~~~~~~~
/usr/httpserver_cpp/src/MyChannel.cpp:8:26: note: the first parameter in the range is 'fd'
MyChannel::MyChannel(int fd,int32_t events)
                         ^~
/usr/httpserver_cpp/src/MyChannel.cpp:8:37: note: the last parameter in the range is 'events'
MyChannel::MyChannel(int fd,int32_t events)
                                    ^~~~~~
/usr/httpserver_cpp/src/MyChannel.cpp:8:22: note: after resolving type aliases, 'int' and 'int32_t' are the same
MyChannel::MyChannel(int fd,int32_t events)
                     ^
/usr/httpserver_cpp/src/MyChannel.cpp:8:26: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
MyChannel::MyChannel(int fd,int32_t events)
                         ^
/usr/httpserver_cpp/src/MyChannel.cpp:10:5: warning: 'fd_' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]
    this->fd_ = fd;
    ^~~~~~~~~~~~~~~
/usr/httpserver_cpp/src/MyChannel.cpp:11:5: warning: 'events_' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]
    this->events_ = events;
    ^~~~~~~~~~~~~~~~~~~~~~~
/usr/httpserver_cpp/src/MyChannel.cpp:12:5: warning: 'revents_' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]
    this->revents_ = 0;
    ^~~~~~~~~~~~~~~~~~~
/usr/httpserver_cpp/src/MyChannel.cpp:13:5: warning: 'inEpoll_' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]
    this->inEpoll_ = false;
    ^~~~~~~~~~~~~~~~~~~~~~~
/usr/httpserver_cpp/src/MyChannel.cpp:16:12: warning: use '= default' to define a trivial destructor [modernize-use-equals-default]
MyChannel::~MyChannel(){}
           ^           ~~
                       = default;
/usr/httpserver_cpp/src/MyChannel.cpp:20:9: warning: implicit conversion 'unsigned int' -> bool [readability-implicit-bool-conversion]
    if (revents_ & EPOLLIN) 
        ^
        (                 ) != 0u
/usr/httpserver_cpp/src/MyChannel.cpp:29:57: warning: the const qualified parameter 'cb' is copied for each invocation; consider making it a reference [performance-unnecessary-value-param]
void MyChannel::setCallback(const std::function<void()> cb) 
                                                        ^
                                                       &
/usr/httpserver_cpp/src/MyChannel.cpp:29:57: warning: parameter name 'cb' is too short, expected at least 3 characters [readability-identifier-length]
/usr/httpserver_cpp/src/MyChannel.cpp:31:21: warning: std::move of the const variable 'cb' has no effect; remove std::move() or make the variable non-const [performance-move-const-arg]
    readCallback_ = std::move(cb); 
                    ^~~~~~~~~~  ~
/usr/httpserver_cpp/src/MyChannel.h:8:7: warning: class 'MyChannel' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class MyChannel
      ^
/usr/httpserver_cpp/src/MyChannel.h:11:23: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
        MyChannel(int fd, int32_t events );
                      ^
/usr/httpserver_cpp/src/MyChannel.h:16:14: warning: invalid case style for function 'setEvents' [readability-identifier-naming]
        void setEvents(uint32_t ev) { events_ = ev; }
             ^~~~~~~~~
             SetEvents
/usr/httpserver_cpp/src/MyChannel.h:16:33: warning: parameter name 'ev' is too short, expected at least 3 characters [readability-identifier-length]
        void setEvents(uint32_t ev) { events_ = ev; }
                                ^
/usr/httpserver_cpp/src/MyChannel.h:17:14: warning: invalid case style for function 'setRevents' [readability-identifier-naming]
        void setRevents(uint32_t rev) { revents_ = rev; }
             ^~~~~~~~~~
             SetRevents
/usr/httpserver_cpp/src/MyChannel.h:18:14: warning: invalid case style for function 'setInEpoll' [readability-identifier-naming]
        void setInEpoll(bool in) { inEpoll_ = in; }
             ^~~~~~~~~~
             SetInEpoll
/usr/httpserver_cpp/src/MyChannel.h:18:30: warning: parameter name 'in' is too short, expected at least 3 characters [readability-identifier-length]
        void setInEpoll(bool in) { inEpoll_ = in; }
                             ^
/usr/httpserver_cpp/src/MyChannel.h:19:14: warning: invalid case style for function 'setCallback' [readability-identifier-naming]
        void setCallback(const std::function<void()> cb);
             ^~~~~~~~~~~
             SetCallback
/usr/httpserver_cpp/src/MyChannel.h:19:26: warning: parameter 'cb' is const-qualified in the function declaration; const-qualification of parameters only has an effect in function definitions [readability-avoid-const-params-in-decls]
        void setCallback(const std::function<void()> cb);
                         ^~~~~~
/usr/httpserver_cpp/src/MyChannel.h:19:54: warning: parameter name 'cb' is too short, expected at least 3 characters [readability-identifier-length]
        void setCallback(const std::function<void()> cb);
                                                     ^
/usr/httpserver_cpp/src/MyChannel.h:20:14: warning: invalid case style for function 'handleEvent' [readability-identifier-naming]
        void handleEvent();
             ^~~~~~~~~~~
             HandleEvent
/usr/httpserver_cpp/src/MyChannel.h:22:9: warning: function 'getFd' should be marked [[nodiscard]] [modernize-use-nodiscard]
        int getFd() const { return fd_; }
        ^
        [[nodiscard]] 
/usr/httpserver_cpp/src/MyChannel.h:22:13: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
        int getFd() const { return fd_; }
        ~~~ ^
        auto              -> int
/usr/httpserver_cpp/src/MyChannel.h:22:13: warning: invalid case style for function 'getFd' [readability-identifier-naming]
        int getFd() const { return fd_; }
            ^~~~~
            GetFd
/usr/httpserver_cpp/src/MyChannel.h:24:9: warning: function 'getEvents' should be marked [[nodiscard]] [modernize-use-nodiscard]
        uint32_t getEvents() const { return events_; }
        ^
        [[nodiscard]] 
/usr/httpserver_cpp/src/MyChannel.h:24:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
        uint32_t getEvents() const { return events_; }
        ~~~~~~~~ ^
        auto                       -> uint32_t
/usr/httpserver_cpp/src/MyChannel.h:24:18: warning: invalid case style for function 'getEvents' [readability-identifier-naming]
        uint32_t getEvents() const { return events_; }
                 ^~~~~~~~~
                 GetEvents
/usr/httpserver_cpp/src/MyChannel.h:25:9: warning: function 'getRevents' should be marked [[nodiscard]] [modernize-use-nodiscard]
        uint32_t getRevents() const { return revents_; }
        ^
        [[nodiscard]] 
/usr/httpserver_cpp/src/MyChannel.h:25:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
        uint32_t getRevents() const { return revents_; }
        ~~~~~~~~ ^
        auto                        -> uint32_t
/usr/httpserver_cpp/src/MyChannel.h:25:18: warning: invalid case style for function 'getRevents' [readability-identifier-naming]
        uint32_t getRevents() const { return revents_; }
                 ^~~~~~~~~~
                 GetRevents
/usr/httpserver_cpp/src/MyChannel.h:26:9: warning: function 'isInEpoll' should be marked [[nodiscard]] [modernize-use-nodiscard]
        bool isInEpoll() const { return inEpoll_; }
        ^
        [[nodiscard]] 
/usr/httpserver_cpp/src/MyChannel.h:26:14: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
        bool isInEpoll() const { return inEpoll_; }
        ~~~~ ^
        auto                   -> bool
/usr/httpserver_cpp/src/MyChannel.h:26:14: warning: invalid case style for function 'isInEpoll' [readability-identifier-naming]
        bool isInEpoll() const { return inEpoll_; }
             ^~~~~~~~~
             IsInEpoll
/usr/httpserver_cpp/src/MyConnection.cpp:5:10: warning: inclusion of deprecated C++ header 'errno.h'; consider using 'cerrno' instead [modernize-deprecated-headers]
#include <errno.h>
         ^~~~~~~~~
         <cerrno>
/usr/httpserver_cpp/src/MyConnection.cpp:10:5: warning: 'channel_' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]
    channel_ = new MyChannel(c_sockfd, HANDLE_MODE);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/httpserver_cpp/src/MyConnection.cpp:16:17: warning: invalid case style for variable 'savedErrno' [readability-identifier-naming]
            int savedErrno = 0;
                ^
note: this fix will not be applied because it overlaps with another fix
/usr/httpserver_cpp/src/MyConnection.cpp:17:21: warning: variable name 'n' is too short, expected at least 3 characters [readability-identifier-length]
            ssize_t n = this->inputBuffer_.readFd(channel_->getFd(), &savedErrno);
                    ^
/usr/httpserver_cpp/src/MyConnection.cpp:20:15: warning: do not use 'else' after 'continue' [readability-else-after-return]
            } else if (n == 0) {
              ^~~~~~~~~~~~~~~~~~
/usr/httpserver_cpp/src/MyConnection.cpp:34:37: warning: statement should be inside braces [readability-braces-around-statements]
        if (this->message_callback_) this->message_callback_(channel_->getFd()); });
                                    ^
                                     {
/usr/httpserver_cpp/src/MyConnection.cpp:41:9: warning: implicit conversion 'MyChannel *' -> bool [readability-implicit-bool-conversion]
    if (channel_)
        ^
                 != nullptr
/usr/httpserver_cpp/src/MyConnection.cpp:49:64: warning: parameter name 'cb' is too short, expected at least 3 characters [readability-identifier-length]
void MyConnection::setMessageCallback(std::function<void(int)> cb)
                                                               ^
/usr/httpserver_cpp/src/MyConnection.h:9:1: warning: duplicate include [readability-duplicate-include]
#include "MyChannel.h"
^~~~~~~~~~~~~~~~~~~~~~
/usr/httpserver_cpp/src/MyConnection.h:12:7: warning: class 'MyConnection' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class MyConnection
      ^
/usr/httpserver_cpp/src/MyConnection.h:19:10: warning: invalid case style for function 'setMessageCallback' [readability-identifier-naming]
    void setMessageCallback(std::function<void(int)> cb);
         ^~~~~~~~~~~~~~~~~~
         SetMessageCallback
/usr/httpserver_cpp/src/MyConnection.h:19:54: warning: parameter name 'cb' is too short, expected at least 3 characters [readability-identifier-length]
    void setMessageCallback(std::function<void(int)> cb);
                                                     ^
/usr/httpserver_cpp/src/MyConnection.h:26:13: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
    Buffer &getInputBuffer() { return inputBuffer_; }
    ~~~~~~~~^
    auto                     -> Buffer &
/usr/httpserver_cpp/src/MyConnection.h:26:13: warning: invalid case style for function 'getInputBuffer' [readability-identifier-naming]
    Buffer &getInputBuffer() { return inputBuffer_; }
            ^~~~~~~~~~~~~~
            GetInputBuffer
/usr/httpserver_cpp/src/MyConnection.h:27:13: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
    Buffer &getOutputBuffer() { return outputBuffer_; }
    ~~~~~~~~^
    auto                      -> Buffer &
/usr/httpserver_cpp/src/MyConnection.h:27:13: warning: invalid case style for function 'getOutputBuffer' [readability-identifier-naming]
    Buffer &getOutputBuffer() { return outputBuffer_; }
            ^~~~~~~~~~~~~~~
            GetOutputBuffer
/usr/httpserver_cpp/src/MyEpoll.cpp:13:5: warning: 'epfd_' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]
    epfd_ = epoll_create1(0);
    ^~~~~~~~~~~~~~~~~~~~~~~~~
/usr/httpserver_cpp/src/MyEpoll.cpp:29:15: warning: method 'updateChannel' can be made const [readability-make-member-function-const]
void MyEpoll::updateChannel(MyChannel *channel)
              ^
                                                const
/usr/httpserver_cpp/src/MyEpoll.cpp:31:5: warning: uninitialized record type: 'ev' [cppcoreguidelines-pro-type-member-init]
    struct epoll_event ev;
    ^
                         {}
/usr/httpserver_cpp/src/MyEpoll.cpp:31:24: warning: variable name 'ev' is too short, expected at least 3 characters [readability-identifier-length]
    struct epoll_event ev;
                       ^
/usr/httpserver_cpp/src/MyEpoll.cpp:55:15: warning: method 'delChannel' can be made const [readability-make-member-function-const]
void MyEpoll::delChannel(MyChannel *channel)
              ^
                                             const
/usr/httpserver_cpp/src/MyEpoll.cpp:67:35: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
std::vector<MyChannel *> MyEpoll::getActiveChannels(int timeout)
~~~~~~~~~~~~~~~~~~~~~~~~          ^
auto                                                             -> std::vector<MyChannel *>
/usr/httpserver_cpp/src/MyEpoll.cpp:69:30: warning: invalid case style for variable 'activeChannels' [readability-identifier-naming]
    std::vector<MyChannel *> activeChannels;
                             ^~~~~~~~~~~~~~
                             active_channels
/usr/httpserver_cpp/src/MyEpoll.cpp:70:50: warning: narrowing conversion from 'std::vector::size_type' (aka 'unsigned long') to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    int nfds = epoll_wait(epfd_, events_.data(), events_.size(), timeout);
                                                 ^
/usr/httpserver_cpp/src/MyEpoll.cpp:74:9: warning: use auto when initializing with a cast to avoid duplicating the type name [modernize-use-auto]
        MyChannel *ch = (MyChannel *)events_[i].data.ptr;
        ^~~~~~~~~
        auto
/usr/httpserver_cpp/src/MyEpoll.cpp:74:20: warning: variable name 'ch' is too short, expected at least 3 characters [readability-identifier-length]
        MyChannel *ch = (MyChannel *)events_[i].data.ptr;
                   ^
/usr/httpserver_cpp/src/MyEpoll.cpp:74:25: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
        MyChannel *ch = (MyChannel *)events_[i].data.ptr;
                        ^
/usr/httpserver_cpp/src/MyEpoll.h:10:7: warning: class 'MyEpoll' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class MyEpoll
      ^
/usr/httpserver_cpp/src/MyEpoll.h:16:10: warning: invalid case style for function 'updateChannel' [readability-identifier-naming]
    void updateChannel(MyChannel *channel); // 注册或修改 Channel
         ^~~~~~~~~~~~~
         UpdateChannel
/usr/httpserver_cpp/src/MyEpoll.h:17:10: warning: invalid case style for function 'delChannel' [readability-identifier-naming]
    void delChannel(MyChannel *channel);    // 删除 Channel
         ^~~~~~~~~~
         DelChannel
/usr/httpserver_cpp/src/MyEpoll.h:19:30: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
    std::vector<MyChannel *> getActiveChannels(int timeout = -1); // 返回活跃的 Channel
    ~~~~~~~~~~~~~~~~~~~~~~~~ ^
    auto                                                         -> std::vector<MyChannel *>
/usr/httpserver_cpp/src/MyEpoll.h:19:30: warning: invalid case style for function 'getActiveChannels' [readability-identifier-naming]
    std::vector<MyChannel *> getActiveChannels(int timeout = -1); // 返回活跃的 Channel
                             ^~~~~~~~~~~~~~~~~
                             GetActiveChannels
/usr/httpserver_cpp/src/MyEpoll.h:21:5: warning: function 'getFd' should be marked [[nodiscard]] [modernize-use-nodiscard]
    int getFd() const { return epfd_; }
    ^
    [[nodiscard]] 
/usr/httpserver_cpp/src/MyEpoll.h:21:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
    int getFd() const { return epfd_; }
    ~~~ ^
    auto              -> int
/usr/httpserver_cpp/src/MyEpoll.h:21:9: warning: invalid case style for function 'getFd' [readability-identifier-naming]
    int getFd() const { return epfd_; }
        ^~~~~
        GetFd
/usr/httpserver_cpp/src/MyEpoll.h:22:31: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
    std::vector<epoll_event> &getEvents() { return events_; }
    ~~~~~~~~~~~~~~~~~~~~~~~~~~^
    auto                                  -> std::vector<epoll_event> &
/usr/httpserver_cpp/src/MyEpoll.h:22:31: warning: invalid case style for function 'getEvents' [readability-identifier-naming]
    std::vector<epoll_event> &getEvents() { return events_; }
                              ^~~~~~~~~
                              GetEvents
/usr/httpserver_cpp/src/MyEventLoop.cpp:19:34: warning: invalid case style for variable 'activeChannels' [readability-identifier-naming]
        std::vector<MyChannel *> activeChannels = epoll_->getActiveChannels(); // 获取就绪的 Channel
                                 ^~~~~~~~~~~~~~
                                 active_channels
/usr/httpserver_cpp/src/MyEventLoop.cpp:20:20: warning: variable name 'ch' is too short, expected at least 3 characters [readability-identifier-length]
        for (auto *ch : activeChannels)
                   ^
/usr/httpserver_cpp/src/MyEventLoop.h:6:7: warning: class 'MyEventLoop' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class MyEventLoop
      ^
/usr/httpserver_cpp/src/MyEventLoop.h:12:10: warning: invalid case style for function 'updateChannel' [readability-identifier-naming]
    void updateChannel(MyChannel *channel); // 添加通道
         ^~~~~~~~~~~~~
         UpdateChannel
/usr/httpserver_cpp/src/MyEventLoop.h:13:10: warning: invalid case style for function 'delChannel' [readability-identifier-naming]
    void delChannel(MyChannel *channel);    // 删除通道
         ^~~~~~~~~~
         DelChannel
/usr/httpserver_cpp/src/MyEventLoop.h:14:10: warning: invalid case style for function 'startLoop' [readability-identifier-naming]
    void startLoop();                       // 事件循环
         ^~~~~~~~~
         StartLoop
/usr/httpserver_cpp/src/MyEventLoop.h:15:10: warning: invalid case style for function 'quitLoop' [readability-identifier-naming]
    void quitLoop() { isQuit_ = true; }
         ^~~~~~~~
         QuitLoop
/usr/httpserver_cpp/src/MyEventLoop.h:19:10: warning: use default member initializer for 'isQuit_' [modernize-use-default-member-init]
    bool isQuit_;
         ^
                {false}
/usr/httpserver_cpp/src/MyServer.cpp:4:10: warning: inclusion of deprecated C++ header 'errno.h'; consider using 'cerrno' instead [modernize-deprecated-headers]
#include <errno.h>
         ^~~~~~~~~
         <cerrno>
/usr/httpserver_cpp/src/MyServer.cpp:5:72: warning: parameter name 'ip' is too short, expected at least 3 characters [readability-identifier-length]
MyServer::MyServer(MyEventLoop *loop, int poolsize, const std::string &ip, int port) : event_loop_(loop)
                                                                       ^
/usr/httpserver_cpp/src/MyServer.cpp:7:5: warning: 'thread_pool_' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]
    thread_pool_ = new MyThreadPool(poolsize);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/httpserver_cpp/src/MyServer.cpp:10:5: warning: 'acceptor_' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]
    acceptor_ = new MyAcceptor(loop, ip, port);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/httpserver_cpp/src/MyServer.cpp:28:10: warning: variable name 'it' is too short, expected at least 3 characters [readability-identifier-length]
    auto it = connections_.find(c_sockfd);
         ^
/usr/httpserver_cpp/src/MyServer.cpp:29:34: warning: statement should be inside braces [readability-braces-around-statements]
    if (it == connections_.end())
                                 ^
                                  {
/usr/httpserver_cpp/src/MyServer.cpp:32:13: warning: variable name 'in' is too short, expected at least 3 characters [readability-identifier-length]
    Buffer &in = conn->getInputBuffer();
            ^
/usr/httpserver_cpp/src/MyServer.cpp:40:22: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
        static const char kBody[] = "Hello, World\n";
                     ^
/usr/httpserver_cpp/src/MyServer.cpp:40:27: warning: invalid case style for variable 'kBody' [readability-identifier-naming]
        static const char kBody[] = "Hello, World\n";
                          ^~~~~
                          k_body
/usr/httpserver_cpp/src/MyServer.cpp:41:9: warning: do not declare C-style arrays, use std::array<> instead [cppcoreguidelines-avoid-c-arrays,modernize-avoid-c-arrays]
        char header[256];
        ^
/usr/httpserver_cpp/src/MyServer.cpp:41:21: warning: 256 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
        char header[256];
                    ^
/usr/httpserver_cpp/src/MyServer.cpp:42:13: warning: invalid case style for variable 'bodyLen' [readability-identifier-naming]
        int bodyLen = sizeof(kBody) - 1;
            ^~~~~~~
            body_len
/usr/httpserver_cpp/src/MyServer.cpp:43:13: warning: invalid case style for variable 'hdrLen' [readability-identifier-naming]
        int hdrLen = snprintf(header, sizeof(header),
            ^~~~~~
            hdr_len
/usr/httpserver_cpp/src/MyServer.cpp:51:17: warning: variable name 'n1' is too short, expected at least 3 characters [readability-identifier-length]
        ssize_t n1 = write(c_sockfd, header, hdrLen);
                ^
/usr/httpserver_cpp/src/MyServer.cpp:59:17: warning: variable name 'n2' is too short, expected at least 3 characters [readability-identifier-length]
        ssize_t n2 = write(c_sockfd, kBody, bodyLen);
                ^
/usr/httpserver_cpp/src/MyServer.cpp:72:18: warning: invalid case style for variable 'ioLoop' [readability-identifier-naming]
    MyEventLoop *ioLoop = thread_pool_->getNextLoop();
                 ^~~~~~
                 io_loop
/usr/httpserver_cpp/src/MyServer.cpp:74:5: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
    MyConnection *conn = new MyConnection(ioLoop, c_sockfd);
    ^~~~~~~~~~~~
    auto
/usr/httpserver_cpp/src/MyServer.cpp:76:20: warning: parameter name 'fd' is too short, expected at least 3 characters [readability-identifier-length]
        [this](int fd)
                   ^
/usr/httpserver_cpp/src/MyServer.h:15:7: warning: class 'MyServer' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class MyServer {
      ^
/usr/httpserver_cpp/src/MyServer.h:17:74: warning: parameter name 'ip' is too short, expected at least 3 characters [readability-identifier-length]
    MyServer(MyEventLoop *loop,int poolsize=POOL_SIZE,const std::string& ip=SERVER_IP, int port=SERVER_PORT);                        // 构造函数
                                                                         ^
/usr/httpserver_cpp/src/MyServer.h:20:10: warning: invalid case style for function 'handleClientEvent' [readability-identifier-naming]
    void handleClientEvent(int c_sockfd);
         ^~~~~~~~~~~~~~~~~
         HandleClientEvent
/usr/httpserver_cpp/src/MyServer.h:22:10: warning: invalid case style for function 'handleServerEvent' [readability-identifier-naming]
    void handleServerEvent(int c_sockfd);
         ^~~~~~~~~~~~~~~~~
         HandleServerEvent
/usr/httpserver_cpp/src/MyServer.h:24:10: warning: invalid case style for function 'newConnection' [readability-identifier-naming]
    void newConnection(int c_sockfd);
         ^~~~~~~~~~~~~
         NewConnection
/usr/httpserver_cpp/src/MySocket.cpp:7:1: warning: constructor does not initialize these fields: addr_ [cppcoreguidelines-pro-type-member-init]
MySocket::MySocket()
^
/usr/httpserver_cpp/src/MySocket.cpp:9:5: warning: 'sockfd_' should be initialized in a member initializer of the constructor [cppcoreguidelines-prefer-member-initializer]
    sockfd_ = socket(AF_INET, SOCK_STREAM, 0);
    ^~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
/usr/httpserver_cpp/src/MySocket.cpp:27:44: warning: parameter name 'ip' is too short, expected at least 3 characters [readability-identifier-length]
void MySocket::bindAddr(const std::string &ip, int port)
                                           ^
/usr/httpserver_cpp/src/MySocket.cpp:34:23: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
    if (bind(sockfd_, (sockaddr *)&addr_, sizeof(addr_)) < 0)
                      ^
/usr/httpserver_cpp/src/MySocket.cpp:40:16: warning: method 'startListen' can be made const [readability-make-member-function-const]
void MySocket::startListen(int backlog)
               ^
                                        const
/usr/httpserver_cpp/src/MySocket.cpp:48:15: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
int MySocket::acceptConn()
~~~           ^
auto                       -> int
/usr/httpserver_cpp/src/MySocket.cpp:48:15: warning: method 'acceptConn' can be made const [readability-make-member-function-const]
int MySocket::acceptConn()
              ^
                           const
/usr/httpserver_cpp/src/MySocket.cpp:52:32: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
    int cfd = accept4(sockfd_, (sockaddr *)&c_addr, &c_addr_len,
                               ^
/usr/httpserver_cpp/src/MySocket.cpp:63:51: warning: parameter name 'ip' is too short, expected at least 3 characters [readability-identifier-length]
void MySocket::connectToServer(const std::string &ip, int port)
                                                  ^
/usr/httpserver_cpp/src/MySocket.cpp:69:26: warning: do not use C-style cast to convert between unrelated types [cppcoreguidelines-pro-type-cstyle-cast]
    if (connect(sockfd_, (sockaddr *)&addr_, sizeof(addr_)) < 0)
                         ^
/usr/httpserver_cpp/src/MySocket.h:6:7: warning: class 'MySocket' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class MySocket
      ^
/usr/httpserver_cpp/src/MySocket.h:12:10: warning: invalid case style for function 'bindAddr' [readability-identifier-naming]
    void bindAddr(const std::string &ip, int port); // 绑定 IP 和端口
         ^~~~~~~~
         BindAddr
/usr/httpserver_cpp/src/MySocket.h:12:38: warning: parameter name 'ip' is too short, expected at least 3 characters [readability-identifier-length]
    void bindAddr(const std::string &ip, int port); // 绑定 IP 和端口
                                     ^
/usr/httpserver_cpp/src/MySocket.h:13:10: warning: invalid case style for function 'startListen' [readability-identifier-naming]
    void startListen(int backlog = 5);              // 开始监听
         ^~~~~~~~~~~
         StartListen
/usr/httpserver_cpp/src/MySocket.h:13:36: warning: 5 is a magic number; consider replacing it with a named constant [readability-magic-numbers]
    void startListen(int backlog = 5);              // 开始监听
                                   ^
/usr/httpserver_cpp/src/MySocket.h:14:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
    int acceptConn();                               // 接受连接，返回客户端 fd
    ~~~ ^
    auto             -> int
/usr/httpserver_cpp/src/MySocket.h:14:9: warning: invalid case style for function 'acceptConn' [readability-identifier-naming]
    int acceptConn();                               // 接受连接，返回客户端 fd
        ^~~~~~~~~~
        AcceptConn
/usr/httpserver_cpp/src/MySocket.h:15:10: warning: invalid case style for function 'connectToServer' [readability-identifier-naming]
    void connectToServer(const std::string &ip, int port);
         ^~~~~~~~~~~~~~~
         ConnectToServer
/usr/httpserver_cpp/src/MySocket.h:15:45: warning: parameter name 'ip' is too short, expected at least 3 characters [readability-identifier-length]
    void connectToServer(const std::string &ip, int port);
                                            ^
/usr/httpserver_cpp/src/MySocket.h:17:5: warning: function 'getFd' should be marked [[nodiscard]] [modernize-use-nodiscard]
    int getFd() const { return sockfd_; } // 获取 socket fd
    ^
    [[nodiscard]] 
/usr/httpserver_cpp/src/MySocket.h:17:9: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
    int getFd() const { return sockfd_; } // 获取 socket fd
    ~~~ ^
    auto              -> int
/usr/httpserver_cpp/src/MySocket.h:17:9: warning: invalid case style for function 'getFd' [readability-identifier-naming]
    int getFd() const { return sockfd_; } // 获取 socket fd
        ^~~~~
        GetFd
/usr/httpserver_cpp/src/MyThreadPool.cpp:13:16: warning: variable name 't' is too short, expected at least 3 characters [readability-identifier-length]
    for (auto &t : threads_)
               ^
/usr/httpserver_cpp/src/MyThreadPool.cpp:15:26: warning: statement should be inside braces [readability-braces-around-statements]
        if (t.joinable())
                         ^
                          {
/usr/httpserver_cpp/src/MyThreadPool.cpp:32:13: warning: use auto when initializing with new to avoid duplicating the type name [modernize-use-auto]
            MyEventLoop *loop = new MyEventLoop();
            ^~~~~~~~~~~
            auto
/usr/httpserver_cpp/src/MyThreadPool.cpp:43:28: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
MyEventLoop *MyThreadPool::getNextLoop()
~~~~~~~~~~~~~              ^
auto                                     -> MyEventLoop *
/usr/httpserver_cpp/src/MyThreadPool.cpp:51:13: warning: narrowing conversion from 'unsigned long' to signed type 'int' is implementation-defined [bugprone-narrowing-conversions,cppcoreguidelines-narrowing-conversions]
    next_ = (next_ + 1) % loops_.size(); // round-robin 轮询
            ^
/usr/httpserver_cpp/src/MyThreadPool.h:10:7: warning: class 'MyThreadPool' defines a non-default destructor but does not define a copy constructor, a copy assignment operator, a move constructor or a move assignment operator [cppcoreguidelines-special-member-functions]
class MyThreadPool
      ^
/usr/httpserver_cpp/src/MyThreadPool.h:17:10: warning: use default member initializer for 'stop_' [modernize-use-default-member-init]
    bool stop_;
         ^
              {false}
/usr/httpserver_cpp/src/MyThreadPool.h:18:9: warning: use default member initializer for 'next_' [modernize-use-default-member-init]
    int next_; // 轮询分配下标
        ^
             {0}
/usr/httpserver_cpp/src/MyThreadPool.h:24:10: warning: invalid case style for function 'start' [readability-identifier-naming]
    void start();               // 创建线程并启动事件循环
         ^~~~~
         Start
/usr/httpserver_cpp/src/MyThreadPool.h:25:18: warning: use a trailing return type for this function [modernize-use-trailing-return-type]
    MyEventLoop *getNextLoop(); // 获取一个 sub Reactor
    ~~~~~~~~~~~~~^
    auto                       -> MyEventLoop *
/usr/httpserver_cpp/src/MyThreadPool.h:25:18: warning: invalid case style for function 'getNextLoop' [readability-identifier-naming]
    MyEventLoop *getNextLoop(); // 获取一个 sub Reactor
                 ^~~~~~~~~~~
                 GetNextLoop
/usr/httpserver_cpp/src/config.h:6:15: warning: invalid case style for variable 'POOL_SIZE' [readability-identifier-naming]
constexpr int POOL_SIZE = 3;
              ^~~~~~~~~
              pool_size
/usr/httpserver_cpp/src/config.h:7:15: warning: invalid case style for variable 'SERVER_PORT' [readability-identifier-naming]
constexpr int SERVER_PORT = 8888;
              ^~~~~~~~~~~
              server_port
/usr/httpserver_cpp/src/config.h:8:23: warning: invalid case style for variable 'SERVER_IP' [readability-identifier-naming]
constexpr const char* SERVER_IP = "127.0.0.1";
                      ^~~~~~~~~
                      server_ip
/usr/httpserver_cpp/src/config.h:9:19: warning: invalid case style for variable 'ACCEPT_MODE' [readability-identifier-naming]
constexpr int32_t ACCEPT_MODE = EPOLLIN;
                  ^~~~~~~~~~~
                  accept_mode
/usr/httpserver_cpp/src/config.h:10:19: warning: invalid case style for variable 'HANDLE_MODE' [readability-identifier-naming]
constexpr int32_t HANDLE_MODE = EPOLLIN | EPOLLET;
                  ^~~~~~~~~~~
                  handle_mode
/usr/httpserver_cpp/src/config.h:11:19: warning: invalid case style for variable 'MAX_EVENTS' [readability-identifier-naming]
constexpr int32_t MAX_EVENTS = 1024;
                  ^~~~~~~~~~
                  max_events
Suppressed 344456 warnings (344456 in non-user code).
Use -header-filter=.* to display errors from all non-system headers. Use -system-headers to display errors from system headers as well.
